-------------- BLOK CZYSZCZACY
-----------------------------------
BEGIN
  FOR cur_rec IN (SELECT object_name, object_type 
                  FROM   user_objects
                  WHERE  object_type IN ('TABLE', 'VIEW', 'PACKAGE', 'PROCEDURE', 'FUNCTION', 'SEQUENCE', 'TRIGGER', 'TYPE')) LOOP
    BEGIN
      IF cur_rec.object_type = 'TABLE' THEN
        IF instr(cur_rec.object_name, 'STORE') = 0 then
          EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '" CASCADE CONSTRAINTS';
        END IF;
      ELSIF cur_rec.object_type = 'TYPE' THEN
        EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '" FORCE';
      ELSE
        EXECUTE IMMEDIATE 'DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"';
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.put_line('FAILED: DROP ' || cur_rec.object_type || ' "' || cur_rec.object_name || '"');
    END;
  END LOOP;
END;
/

-------------- TABELE + SEKWENCJE + TRIGGERY
--------------------------------------------------------

-------------- ------------ -------------- 
-------------- -- ADRESY -- -------------- 
-------------- ------------ -------------- 
CREATE TABLE ADRESY 
(
  ID_ADRESU NUMBER NOT NULL 
, ULICA VARCHAR2(30) NOT NULL 
, NR_DOMU NUMBER NOT NULL 
, NR_MIESZKANIA NUMBER 
, MIEJSCOWOSC VARCHAR2(30) NOT NULL 
, KOD_POCZTOWY VARCHAR2(7) NOT NULL 
, KRAJ VARCHAR2(30) NOT NULL 
, CONSTRAINT ADRESY_PK PRIMARY KEY 
  (
    ID_ADRESU 
  )
  ENABLE 
);
/
CREATE SEQUENCE ADRES_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER ADRESY_TRG 
BEFORE INSERT ON ADRESY 
FOR EACH ROW
BEGIN
  :NEW.ID_ADRESU := ADRES_SEQ.NEXTVAL;
END;
/
-------------- --------------------- -------------- 
-------------- -- DANE PERSONALNE -- -------------- 
-------------- --------------------- -------------- 
CREATE TABLE DANE_PERSONALNE 
(
  ID_OSOBY NUMBER NOT NULL 
, IMIE VARCHAR2(30) NOT NULL 
, NAZWISKO VARCHAR2(30) NOT NULL 
, EMAIL VARCHAR2(50) 
, NR_TELEFONU VARCHAR2(14) NOT NULL 
, ID_ADRESU NUMBER NOT NULL 
, CONSTRAINT DANE_PERSONALNE_PK PRIMARY KEY 
  (
    ID_OSOBY 
  )
  ENABLE 
, CONSTRAINT FK_DANE_PERSONALNE_ID_ADRESU FOREIGN KEY (ID_ADRESU)
    REFERENCES ADRESY (ID_ADRESU)
);
/
CREATE SEQUENCE DANE_PERSONALNE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER DANE_PERSONALNE_TRG 
BEFORE INSERT ON DANE_PERSONALNE 
FOR EACH ROW
BEGIN
  :NEW.ID_OSOBY := DANE_PERSONALNE_SEQ.NEXTVAL;
END;
/
-------------- ------------ -------------- 
-------------- -- HOTELE -- -------------- 
-------------- ------------ -------------- 
CREATE TABLE HOTELE 
(
  ID_HOTELU NUMBER NOT NULL 
, ID_ADRESU NUMBER NOT NULL 
, NAZWA VARCHAR2(20) NOT NULL 
, CONSTRAINT HOTELE_PK PRIMARY KEY 
  (
    ID_HOTELU 
  )
  ENABLE 
, CONSTRAINT FK_HOTELE_ID_ADRESU FOREIGN KEY (ID_ADRESU)
    REFERENCES ADRESY (ID_ADRESU)
);
/
CREATE SEQUENCE HOTELE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER HOTELE_TRG 
BEFORE INSERT ON HOTELE 
FOR EACH ROW
BEGIN
  :NEW.ID_HOTELU := HOTELE_SEQ.NEXTVAL;
END;
/
-------------- -------------- -------------- 
-------------- -- PERSONEL -- -------------- 
-------------- -------------- -------------- 
CREATE TABLE PERSONEL 
(
  ID_PRACOWNIKA NUMBER NOT NULL 
, ID_OSOBY NUMBER NOT NULL
, ID_HOTELU NUMBER NOT NULL
, DATA_ZATRUDNIENIA DATE NOT NULL 
, DATA_ZWOLNIENIA DATE 
, PENSJA NUMBER NOT NULL 
, STANOWISKO VARCHAR2(20) NOT NULL 
, CONSTRAINT PERSONEL_PK PRIMARY KEY 
  (
    ID_PRACOWNIKA 
  )
  ENABLE 
, CONSTRAINT FK_PERSONEL_ID_DANE_PERSONALNE FOREIGN KEY (ID_OSOBY)
    REFERENCES DANE_PERSONALNE (ID_OSOBY)
, CONSTRAINT FK_PERSONEL_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
);
/
CREATE SEQUENCE PERSONEL_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER PERSONEL_TRG 
BEFORE INSERT ON PERSONEL 
FOR EACH ROW
BEGIN
  :NEW.ID_PRACOWNIKA := PERSONEL_SEQ.NEXTVAL;
END;
/
-------------- ------------ -------------- 
-------------- -- ZNIZKI -- -------------- 
-------------- ------------ -------------- 
CREATE TABLE ZNIZKI 
(
  ID_ZNIZKI NUMBER NOT NULL 
, PROCENT NUMBER NOT NULL
, CONSTRAINT ZNIZKI_PK PRIMARY KEY 
  (
    ID_ZNIZKI 
  )
  ENABLE 
);
/
CREATE SEQUENCE ZNIZKI_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER ZNIZKI_TRG 
BEFORE INSERT ON ZNIZKI 
FOR EACH ROW
BEGIN
  IF :NEW.PROCENT < 0 AND :NEW.PROCENT > 100 THEN
    RAISE_APPLICATION_ERROR(-20019, 'PROCENT PWOINIEN BYÆ W ZAKRESIE [0, 100]');
  END IF;
  :NEW.ID_ZNIZKI := ZNIZKI_SEQ.NEXTVAL;
END;
/
-------------- ------------- -------------- 
-------------- -- KLIENCI -- -------------- 
-------------- ------------- -------------- 
CREATE TABLE KLIENCI 
(
  ID_KLIENTA NUMBER NOT NULL 
, ID_OSOBY NUMBER NOT NULL
, ID_ZNIZKI NUMBER DEFAULT 0 NOT NULL 
, CONSTRAINT KLIENCI_PK PRIMARY KEY 
  (
    ID_KLIENTA 
  )
  ENABLE 
, CONSTRAINT FK_KLIENCI_ID_DANE_PERSONALNE FOREIGN KEY (ID_OSOBY)
    REFERENCES DANE_PERSONALNE (ID_OSOBY)
, CONSTRAINT FK_KLIENCI_ID_ZNIZKI FOREIGN KEY (ID_ZNIZKI)
    REFERENCES ZNIZKI (ID_ZNIZKI)
);
/
CREATE SEQUENCE KLIENCI_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER KLIENCI_TRG 
BEFORE INSERT ON KLIENCI 
FOR EACH ROW
BEGIN
  :NEW.ID_KLIENTA := KLIENCI_SEQ.NEXTVAL;
END;
/
-------------- ------------ -------------- 
-------------- -- POKOJE -- -------------- 
-------------- ------------ -------------- 
CREATE TABLE POKOJE 
(
  ID_POKOJU NUMBER NOT NULL 
, ID_HOTELU NUMBER NOT NULL 
, NR_POKOJU NUMBER NOT NULL
, LICZBA_OSOB NUMBER NOT NULL
, CENA NUMBER NOT NULL
, CONSTRAINT POKOJE_PK PRIMARY KEY 
  (
    ID_POKOJU 
  )
  ENABLE 
, CONSTRAINT FK_POKOJE_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
);
/
CREATE SEQUENCE POKOJE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER POKOJE_TRG 
BEFORE INSERT ON POKOJE 
FOR EACH ROW
BEGIN
  :NEW.ID_POKOJU := POKOJE_SEQ.NEXTVAL;
END;
/
-------------- ---------------- -------------- 
-------------- -- REZERWACJE -- -------------- 
-------------- ---------------- -------------- 
CREATE TABLE REZERWACJE 
(
  ID_REZERWACJI NUMBER NOT NULL 
, ID_HOTELU NUMBER NOT NULL
, ID_KLIENTA NUMBER NOT NULL 
, ID_PRACOWNIKA NUMBER NOT NULL 
, ID_POKOJU NUMBER NOT NULL 
, PRZYJAZD DATE NOT NULL 
, ODJAZD DATE NOT NULL 
, ZAMELDOWANIE DATE 
, ODMELDOWANIE DATE 
, OPLATA_ZNISCZENIE NUMBER DEFAULT 0
, CENA_POBYTU NUMBER DEFAULT 0
, OPLATA_ZALICZKA NUMBER 
, OPLATA_CALOSC NUMBER 
, CONSTRAINT REZERWACJE_PK PRIMARY KEY 
  (
    ID_REZERWACJI 
  )
  ENABLE 
, CONSTRAINT FK_REZERWACJE_ID_KLIENTA FOREIGN KEY (ID_KLIENTA)
    REFERENCES KLIENCI (ID_KLIENTA)
, CONSTRAINT FK_REZERWACJE_ID_PRACOWNIKA FOREIGN KEY (ID_PRACOWNIKA)
    REFERENCES PERSONEL (ID_PRACOWNIKA)
, CONSTRAINT FK_REZERWACJE_ID_POKOJU FOREIGN KEY (ID_POKOJU)
    REFERENCES POKOJE (ID_POKOJU)
, CONSTRAINT FK_REZERWACJE_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
);
COMMENT ON COLUMN REZERWACJE.PRZYJAZD IS 'Data poczatku rezerwacji.';
COMMENT ON COLUMN REZERWACJE.ODJAZD IS 'Data konca rezerwacji.';
COMMENT ON COLUMN REZERWACJE.ZAMELDOWANIE IS 'Data zameldowania klienta w hotelu.';
COMMENT ON COLUMN REZERWACJE.ODMELDOWANIE IS 'Data odmeldowania klienta z hotelu.';

CREATE SEQUENCE REZERWACJE_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER REZERWACJE_TRG 
BEFORE INSERT ON REZERWACJE 
FOR EACH ROW
BEGIN
  :NEW.ID_REZERWACJI := REZERWACJE_SEQ.NEXTVAL;
END;
/
-------------- ------------- -------------- 
-------------- -- NAPRAWY -- -------------- 
-------------- ------------- -------------- 
CREATE TABLE NAPRAWY
(
    ID_HOTELU NUMBER NOT NULL, 
    NR_POKOJU NUMBER NOT NULL, 
    ID_REZERWACJI NUMBER NOT NULL, 
    OPIS VARCHAR2(255), 
    GODZINY_NAPRAWIANIA_POCZATEK TIMESTAMP,
    GODZINY_NAPRAWIANIA_KONIEC TIMESTAMP, 
    ID_PRACOWNIKA NUMBER,
    GODZINA_NAPRAWY TIMESTAMP,
CONSTRAINT FK_NAPRAWY_ID_PRACOWNIKA FOREIGN KEY (ID_PRACOWNIKA)
    REFERENCES PERSONEL (ID_PRACOWNIKA),
CONSTRAINT FK_NAPRAWY_ID_REZERWACJI FOREIGN KEY (ID_REZERWACJI)
    REFERENCES REZERWACJE (ID_REZERWACJI),
CONSTRAINT FK_NAPRAWY_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
)
/
CREATE TABLE SPRZATANIE
(
    ID_HOTELU NUMBER NOT NULL, 
    NR_POKOJU NUMBER NOT NULL, 
    ID_REZERWACJI NUMBER NOT NULL, 
    OPIS VARCHAR2(255), 
    GODZINY_SPRZATANIA_POCZATEK TIMESTAMP,
    GODZINY_SPRZATANIA_KONIEC TIMESTAMP, 
    ID_PRACOWNIKA NUMBER,
    GODZINA_SPRZATANIA TIMESTAMP,
CONSTRAINT FK_SPRZATANIE_ID_PRACOWNIKA FOREIGN KEY (ID_PRACOWNIKA)
    REFERENCES PERSONEL (ID_PRACOWNIKA),
CONSTRAINT FK_SPRZATANIE_ID_REZERWACJI FOREIGN KEY (ID_REZERWACJI)
    REFERENCES REZERWACJE (ID_REZERWACJI),
CONSTRAINT FK_SPRZATANIE_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
)
/
-------------- ------------ -------------- 
-------------- -- GOSCIE -- -------------- 
-------------- ------------ -------------- 
CREATE TABLE GOSCIE 
(
  ID_REZERWACJI NUMBER NOT NULL 
, IMIE VARCHAR2(30) NOT NULL 
, NAZWISKO VARCHAR2(30) NOT NULL 
, CONSTRAINT FK_GOSCIE_ID_REZERWACJI FOREIGN KEY (ID_REZERWACJI)
    REFERENCES REZERWACJE (ID_REZERWACJI)
);
/
-------------- ----------------- --------------
-------------- -- WYPOSAZENIE -- --------------
-------------- ----------------- --------------
CREATE TABLE WYPOSAZENIE 
(
  ID_POKOJU NUMBER NOT NULL 
, NAZWA VARCHAR2(30) NOT NULL 
, ILOSC NUMBER NOT NULL 
, CONSTRAINT FK_WYPOSAZENIE_ID_POKOJU FOREIGN KEY (ID_POKOJU)
    REFERENCES POKOJE (ID_POKOJU)
);
/
-------------- ------------ --------------
-------------- -- USLUGI -- --------------
-------------- ------------ --------------
CREATE TABLE USLUGI 
(	
  ID_USLUGI NUMBER NOT NULL ENABLE
, ID_HOTELU NUMBER NOT NULL ENABLE
, NAZWA VARCHAR2(50 BYTE) NOT NULL ENABLE
, CENA NUMBER NOT NULL ENABLE
, CONSTRAINT USLUGI_PK PRIMARY KEY (ID_USLUGI)
, CONSTRAINT FK_USLUGI_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
);
/
CREATE SEQUENCE USLUGI_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER USLUGI_TRG 
BEFORE INSERT ON USLUGI 
FOR EACH ROW
BEGIN
  :NEW.ID_USLUGI := USLUGI_SEQ.NEXTVAL;
END;
/
-------------- ----------------------- --------------
-------------- -- REZERWACJE US£UGI -- --------------
-------------- ----------------------- --------------
CREATE TABLE REZERWACJE_USLUGI 
(
  ID_REZ_USLUGI NUMBER NOT NULL 
, ID_HOTELU NUMBER NOT NULL 
, ID_USLUGI NUMBER NOT NULL 
, ID_REZERWACJI NUMBER 
, LICZBA_OSOB NUMBER NOT NULL 
, CONSTRAINT REZERWACJE_USLUGI_PK PRIMARY KEY 
  (ID_REZ_USLUGI)
, CONSTRAINT FK_REZERWACJE_USLUGI_ID_HOTELU FOREIGN KEY (ID_HOTELU)
    REFERENCES HOTELE (ID_HOTELU)
, CONSTRAINT FK_REZERWACJE_USLUGI_ID_USLUGI FOREIGN KEY (ID_USLUGI)
    REFERENCES USLUGI (ID_USLUGI)
, CONSTRAINT FK_REZERWACJE_USLUGI_ID_REZERWACJI FOREIGN KEY (ID_REZERWACJI)
    REFERENCES REZERWACJE (ID_REZERWACJI)
  ENABLE 
);
/
CREATE SEQUENCE REZ_USLUGI_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999999999 MINVALUE 1 NOCACHE ORDER;
/
CREATE OR REPLACE TRIGGER REZERWACJE_USLUGI_TRG 
BEFORE INSERT ON REZERWACJE_USLUGI 
FOR EACH ROW
BEGIN
  :NEW.ID_REZ_USLUGI := REZ_USLUGI_SEQ.NEXTVAL;
END;
/

-------------- WIDOKI
----------------------------  

-------------- --------------------- -------------- 
-------------- -- DANE PERSONALNE -- -------------- 
-------------- --------------------- --------------
CREATE VIEW DANE_PERSONALNE_VIEW
AS SELECT 
    Nazwisko, 
    Imie, 
    Email, 
    NR_telefonu, 
    ulica, 
    Nr_Domu, 
    Nr_mieszkania, 
    Miejscowosc, 
    Kod_pocztowy, 
    Kraj 
FROM 
    DANE_PERSONALNE 
JOIN 
    adresy USING(ID_ADRESU);
/   
-------------- ------------ -------------- 
-------------- -- HOTELE -- -------------- 
-------------- ------------ --------------   
CREATE VIEW HOTELE_VIEW
AS SELECT 
    NAZWA,
    ULICA,
    NR_DOMU,
    MIEJSCOWOSC,
    KOD_POCZTOWY,
    KRAJ
FROM 
    HOTELE 
JOIN ADRESY USING(ID_ADRESU);
/

-------------- FUNKCJE
----------------------------

-------------- ------------------------ -------------- 
-------------- -- OBLICZ CENE POBYTU -- -------------- 
-------------- ------------------------ --------------
CREATE OR REPLACE FUNCTION OBLICZ_CENE_POBYTU 
(
  P_ID_REZERWACJI IN NUMBER  
) RETURN NUMBER AS 
  V_LICZBA_DNI NUMBER;
  V_OPLATA_ZNISZCZENIE NUMBER := 0;
  V_ID_POKOJU NUMBER;
  V_CENA_POKOJU NUMBER;
  V_ID_KLIENTA NUMBER;
  V_ID_ZNIZKI NUMBER;
  V_PROCENT_ZNIZKI NUMBER := 0;
  V_ID_USLUGI NUMBER;
  V_CENA_USLUGA NUMBER := 0;
  V_LICZBA_OSOB_USLUGA NUMBER := 0;
  V_LICZBA_OSOB_POKOJ NUMBER;
  V_TEMP NUMBER;
  V_CENA_POBYTU NUMBER := 0;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  SELECT TRUNC(ODJAZD - PRZYJAZD) INTO V_LICZBA_DNI FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_LICZBA_DNI <= 0 THEN
    RAISE_APPLICATION_ERROR(-20005, 'REZERWACJA NIE TRWA£A NAWET JEDEN DZIEÑ');
  END IF;

  BEGIN
    SELECT OPLATA_ZNISCZENIE INTO V_OPLATA_ZNISZCZENIE FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_OPLATA_ZNISZCZENIE := 0;
  END;

  SELECT ID_POKOJU INTO V_ID_POKOJU FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

  SELECT COUNT(*) INTO V_TEMP FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  SELECT CENA INTO V_CENA_POKOJU FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU;
  IF V_CENA_POKOJU <= 0 THEN
    RAISE_APPLICATION_ERROR(-20008, 'CENA JEST B£ÊDNA, POWINNA BYÆ WIÊKSZA OD ZERA');
  END IF;

  SELECT LICZBA_OSOB INTO V_LICZBA_OSOB_POKOJ FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU;
  IF V_LICZBA_OSOB_POKOJ <> 2 AND V_LICZBA_OSOB_POKOJ <> 3 AND V_LICZBA_OSOB_POKOJ <> 4 THEN
    RAISE_APPLICATION_ERROR(-20016, 'LICZBA OSÓB W POKOJU MUSI BYÆ 2, 3 LUB 4');
  END IF;

  SELECT ID_KLIENTA INTO V_ID_KLIENTA FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

  SELECT COUNT(*) INTO V_TEMP FROM KLIENCI WHERE ID_KLIENTA = V_ID_KLIENTA;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20009, 'KLIENT NIE ISTNIEJE');
  END IF;

  SELECT ID_ZNIZKI INTO V_ID_ZNIZKI FROM KLIENCI WHERE ID_KLIENTA = V_ID_KLIENTA;

  SELECT COUNT(*) INTO V_TEMP FROM ZNIZKI WHERE ID_ZNIZKI = V_ID_ZNIZKI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20010, 'ZNI¯KA NIE ISTNIEJE');
  END IF;

  SELECT PROCENT INTO V_PROCENT_ZNIZKI FROM ZNIZKI WHERE ID_ZNIZKI = V_ID_ZNIZKI;
  IF V_PROCENT_ZNIZKI <> 0 AND V_PROCENT_ZNIZKI <> 5 AND V_PROCENT_ZNIZKI <> 10 AND V_PROCENT_ZNIZKI <> 20 THEN
    RAISE_APPLICATION_ERROR(-20011, 'NIEPOPRAWNE WARTOCI ZNI¯KI');
  END IF;

  BEGIN
    SELECT ID_USLUGI, LICZBA_OSOB INTO V_ID_USLUGI, V_LICZBA_OSOB_USLUGA FROM REZERWACJE_USLUGI WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    SELECT CENA INTO V_CENA_USLUGA FROM USLUGI WHERE ID_USLUGI = V_ID_USLUGI;
    IF V_CENA_USLUGA < 0 THEN
      RAISE_APPLICATION_ERROR(-20008, 'CENA JEST B£ÊDNA, POWINNA BYÆ WIÊKSZA OD ZERA');
    END IF;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_CENA_USLUGA := 0;
      V_LICZBA_OSOB_USLUGA := 0;
  END;

  IF V_LICZBA_OSOB_USLUGA < 0 OR V_LICZBA_OSOB_USLUGA > V_LICZBA_OSOB_POKOJ THEN
    RAISE_APPLICATION_ERROR(-20020, 'LICZBA OSÓB W US£UDZE NIE MO¯E BYÆ WIÊKSZA NI¯ LICZBA OSÓB W POKOJU I NIE MO¯E BYÆ MNIEJSZA OD ZERA');
  END IF;

  V_CENA_POBYTU := ((V_LICZBA_DNI * V_CENA_POKOJU) + V_OPLATA_ZNISZCZENIE + (V_LICZBA_OSOB_USLUGA * V_CENA_USLUGA)) * (1 - (V_PROCENT_ZNIZKI / 100));
  RETURN V_CENA_POBYTU;
END OBLICZ_CENE_POBYTU;
/
-------------- ------------------------------------------ -------------- 
-------------- -- ROCZNA LICZBA REZERWACJI DLA KLIENTA -- -------------- 
-------------- ------------------------------------------ --------------
CREATE OR REPLACE FUNCTION ROCZNA_LICZBA_REZERWACJI_KLIENT 
(
  P_ID_KLIENTA IN NUMBER 
) RETURN NUMBER AS 
LICZBA_REZERWACJI NUMBER;
TEMP NUMBER;
BEGIN
  SELECT COUNT(*) INTO TEMP FROM KLIENCI WHERE ID_KLIENTA = P_ID_KLIENTA;
  IF TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20009, 'KLIENT, NIE ISTNIEJE');
  END IF;

  SELECT COUNT(ID_REZERWACJI) INTO LICZBA_REZERWACJI FROM REZERWACJE 
  WHERE ID_KLIENTA = P_ID_KLIENTA
  AND EXTRACT(YEAR FROM PRZYJAZD) = EXTRACT(YEAR FROM SYSDATE); 

  RETURN LICZBA_REZERWACJI;
END ROCZNA_LICZBA_REZERWACJI_KLIENT;
/
-------------- -------------------------------- -------------- 
-------------- -- ZNALEZIENIE WOLNEGO POKOJU -- -------------- 
-------------- -------------------------------- --------------
CREATE OR REPLACE FUNCTION SPRAWDZ_WOLNE_POKOJE (
  P_ID_HOTELU IN NUMBER,
  P_LICZBA_OSOB IN NUMBER,
  P_DATA_PRZYJAZDU IN DATE,
  P_DATA_ODJAZDU IN DATE
) RETURN SYS_REFCURSOR IS
  V_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN V_CURSOR FOR
    SELECT P.ID_POKOJU
    FROM POKOJE P
    WHERE P.ID_HOTELU = P_ID_HOTELU
      AND P.LICZBA_OSOB >= P_LICZBA_OSOB
      AND P.ID_POKOJU NOT IN (
        SELECT R.ID_POKOJU
        FROM REZERWACJE R
        WHERE R.PRZYJAZD < P_DATA_ODJAZDU
          AND R.ODJAZD > P_DATA_PRZYJAZDU
      );
  RETURN V_CURSOR;
END SPRAWDZ_WOLNE_POKOJE;
/
-------------- PROCEDURY
------------------------------
-------------- ----------------- -------------- 
-------------- -- DODAJ ADRES -- -------------- 
-------------- ----------------- -------------- 
CREATE OR REPLACE PROCEDURE DODAJ_ADRES 
(
  P_ULICA IN VARCHAR2, 
  P_NR_DOMU IN NUMBER, 
  P_NR_MIESZKANIA IN NUMBER, 
  P_MIEJSCOWOSC IN VARCHAR2, 
  P_KOD_POCZTOWY IN VARCHAR2, 
  P_KRAJ IN VARCHAR2
) AS 
BEGIN
  INSERT INTO ADRESY (ULICA, NR_DOMU, NR_MIESZKANIA, MIEJSCOWOSC, KOD_POCZTOWY, KRAJ)
  VALUES (P_ULICA, P_NR_DOMU, P_NR_MIESZKANIA, P_MIEJSCOWOSC, P_KOD_POCZTOWY, P_KRAJ);
END DODAJ_ADRES;
/
-------------- --------------------------- -------------- 
-------------- -- DODAJ DANE PERSONALNE -- -------------- 
-------------- --------------------------- -------------- 
CREATE OR REPLACE PROCEDURE DODAJ_DANE_PERSONALNE
( 
  P_IMIE IN VARCHAR2,
  P_NAZWISKO IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_NR_TELEFONU IN VARCHAR2,
  P_ULICA IN VARCHAR2,
  P_NR_DOMU IN NUMBER,
  P_NR_MIESZKANIA IN NUMBER,
  P_MIEJSCOWOSC IN VARCHAR2,
  P_KOD_POCZTOWY IN VARCHAR2,
  P_KRAJ IN VARCHAR2
) AS 
BEGIN
  DODAJ_ADRES(P_ULICA, P_NR_DOMU, P_NR_MIESZKANIA, P_MIEJSCOWOSC, P_KOD_POCZTOWY, P_KRAJ);
  
  INSERT INTO DANE_PERSONALNE (IMIE, NAZWISKO, EMAIL, NR_TELEFONU, ID_ADRESU)
  VALUES (
    P_IMIE, 
    P_NAZWISKO, 
    P_EMAIL, 
    P_NR_TELEFONU, 
    (SELECT ID_ADRESU 
     FROM ADRESY 
     WHERE ULICA = P_ULICA 
       AND NR_DOMU = P_NR_DOMU 
       AND (NR_MIESZKANIA = P_NR_MIESZKANIA OR (NR_MIESZKANIA IS NULL AND P_NR_MIESZKANIA IS NULL))
       AND MIEJSCOWOSC = P_MIEJSCOWOSC 
       AND KOD_POCZTOWY = P_KOD_POCZTOWY 
       AND KRAJ = P_KRAJ)
  );
END DODAJ_DANE_PERSONALNE;
/
-------------- ------------------------- -------------- 
-------------- -- POKOJ DO SPRZATANIA -- -------------- 
-------------- ------------------------- -------------- 
CREATE OR REPLACE PROCEDURE POKOJ_DO_SPRZATANIA
(
  P_ID_HOTELU IN NUMBER,
  P_ID_REZERWACJI IN NUMBER,
  P_NR_POKOJU IN NUMBER,
  P_OPIS IN VARCHAR2,
  P_GODZINA_POCZATEK IN TIMESTAMP,
  P_GODZINA_KONIEC IN TIMESTAMP
) AS 
  V_TEMP NUMBER;
  V_ID_POKOJU NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  SELECT ID_POKOJU INTO V_ID_POKOJU FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

  SELECT COUNT(*) INTO V_TEMP FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU AND NR_POKOJU = P_NR_POKOJU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  IF P_GODZINA_POCZATEK > P_GODZINA_KONIEC THEN
    RAISE_APPLICATION_ERROR(-20023, 'B£ÊDNE GODZINY');
  END IF;

  INSERT INTO SPRZATANIE(ID_HOTELU, NR_POKOJU, ID_REZERWACJI, OPIS, GODZINY_SPRZATANIA_POCZATEK, GODZINY_SPRZATANIA_KONIEC)
  VALUES(P_ID_HOTELU, P_NR_POKOJU, P_ID_REZERWACJI, P_OPIS, P_GODZINA_POCZATEK, P_GODZINA_KONIEC);
END POKOJ_DO_SPRZATANIA;
/
-------------- ---------------------- -------------- 
-------------- -- POKOJ DO NAPRAWY -- -------------- 
-------------- ---------------------- -------------- 
CREATE OR REPLACE PROCEDURE POKOJ_DO_NAPRAWY
(
  P_ID_HOTELU IN NUMBER,
  P_ID_REZERWACJI IN NUMBER,
  P_NR_POKOJU IN NUMBER,
  P_OPIS IN VARCHAR2,
  P_GODZINA_POCZATEK IN TIMESTAMP,
  P_GODZINA_KONIEC IN TIMESTAMP
) AS 
  V_TEMP NUMBER;
  V_ID_POKOJU NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  SELECT ID_POKOJU INTO V_ID_POKOJU FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

  SELECT COUNT(*) INTO V_TEMP FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU AND NR_POKOJU = P_NR_POKOJU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  IF P_GODZINA_POCZATEK > P_GODZINA_KONIEC THEN
    RAISE_APPLICATION_ERROR(-20023, 'B£ÊDNE GODZINY');
  END IF;

  INSERT INTO NAPRAWY(ID_HOTELU, NR_POKOJU, ID_REZERWACJI, OPIS, GODZINY_NAPRAWIANIA_POCZATEK, GODZINY_NAPRAWIANIA_KONIEC)
  VALUES(P_ID_HOTELU, P_NR_POKOJU, P_ID_REZERWACJI, P_OPIS, P_GODZINA_POCZATEK, P_GODZINA_KONIEC);
END POKOJ_DO_NAPRAWY;
/
-------------- ----------------------- -------------- 
-------------- -- AKTUALIZUJ ZNI¯KE -- -------------- 
-------------- ----------------------- --------------
CREATE OR REPLACE PROCEDURE AKTUALIZUJ_ZNIZKE (
  P_ID_KLIENTA IN NUMBER
) AS
  ROCZNA_LICZBA_REZERWACJI NUMBER;
  P_ID_ZNIZKI NUMBER;
BEGIN
  ROCZNA_LICZBA_REZERWACJI := ROCZNA_LICZBA_REZERWACJI_KLIENT(P_ID_KLIENTA);

  IF ROCZNA_LICZBA_REZERWACJI < 2 THEN
    SELECT ID_ZNIZKI INTO P_ID_ZNIZKI FROM ZNIZKI WHERE PROCENT = 0;
  ELSIF ROCZNA_LICZBA_REZERWACJI >= 2 AND ROCZNA_LICZBA_REZERWACJI <= 4 THEN
    SELECT ID_ZNIZKI INTO P_ID_ZNIZKI FROM ZNIZKI WHERE PROCENT = 5;
  ELSIF ROCZNA_LICZBA_REZERWACJI >= 5 AND ROCZNA_LICZBA_REZERWACJI <= 10 THEN
    SELECT ID_ZNIZKI INTO P_ID_ZNIZKI FROM ZNIZKI WHERE PROCENT = 10;
  ELSIF ROCZNA_LICZBA_REZERWACJI >= 10 THEN
    SELECT ID_ZNIZKI INTO P_ID_ZNIZKI FROM ZNIZKI WHERE PROCENT = 20;    
  END IF;

  UPDATE KLIENCI SET ID_ZNIZKI = P_ID_ZNIZKI WHERE ID_KLIENTA = P_ID_KLIENTA;
END AKTUALIZUJ_ZNIZKE;
/
-------------- ---------------------------- -------------- 
-------------- -- AKTUALIZUJ CENE POBYTU -- -------------- 
-------------- ---------------------------- --------------
CREATE OR REPLACE PROCEDURE AKTUALIZUJ_CENE_POBYTU(
  P_ID_REZERWACJI IN NUMBER
) AS
  TEMP NUMBER;
  NOWA_CENA_POBYTU NUMBER;
BEGIN
  SELECT COUNT(*) INTO TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  NOWA_CENA_POBYTU := OBLICZ_CENE_POBYTU(P_ID_REZERWACJI);

  UPDATE REZERWACJE SET CENA_POBYTU = NOWA_CENA_POBYTU WHERE ID_REZERWACJI = P_ID_REZERWACJI;

END AKTUALIZUJ_CENE_POBYTU;
/
-------------- PAKIETY
------------------------------

-------------- ---------- -------------- 
-------------- -- SZEF -- -------------- 
-------------- ---------- -------------- 
CREATE OR REPLACE PACKAGE SZEF AS 

PROCEDURE DODAJ_HOTEL(
  NAZWA IN VARCHAR2
, ULICA IN VARCHAR2 
, NR_DOMU IN NUMBER 
, NR_MIESZKANIA IN NUMBER 
, MIEJSCOWOSC IN VARCHAR2 
, KOD_POCZTOWY IN VARCHAR2 
, KRAJ IN VARCHAR2 
);

PROCEDURE ZMIEN_NAZWE_HOTELU(
  ID_HOTELU IN NUMBER
, NOWA_NAZWA IN VARCHAR2
);

PROCEDURE DODAJ_POKOJ(
  P_ID_HOTELU IN NUMBER,
  P_NR_POKOJU IN NUMBER,
  P_LICZBA_OSOB IN NUMBER,
  P_CENA IN NUMBER
);

PROCEDURE DODAJ_WYPOSAZENIE(
  P_ID_POKOJU IN NUMBER,
  P_NAZWA_WYPOSAZENIA IN VARCHAR2,
  P_ILOSC IN NUMBER
);

PROCEDURE ZMIEN_CENE_POKOJU(
  P_ID_POKOJU IN NUMBER
, NOWA_CENA IN NUMBER
);

PROCEDURE ZMIEN_ILOSC_WYPOSAZENIA(
  P_ID_POKOJU IN NUMBER
, P_NAZWA IN VARCHAR2
, NOWA_ILOSC IN NUMBER
);

PROCEDURE ZMIEN_LICZBE_OSOB_POKOJU(
  P_ID_POKOJU IN NUMBER,
  NOWA_LICZBA_OSOB IN NUMBER
);

PROCEDURE ZMIEN_NUMER_POKOJU(
  P_ID_POKOJU IN NUMBER
, NOWY_NR_POKOJU IN NUMBER
);

PROCEDURE ZMIEN_NAZWE_WYPOSAZENIA
(
  P_ID_POKOJU IN NUMBER
, P_NAZWA IN VARCHAR2
, NOWA_NAZWA IN VARCHAR2
);

PROCEDURE DODAJ_PRACOWNIKA( 
  P_IMIE IN VARCHAR2,
  P_NAZWISKO IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_NR_TELEFONU IN VARCHAR2,
  P_ULICA IN VARCHAR2,
  P_NR_DOMU IN NUMBER,
  P_NR_MIESZKANIA IN NUMBER,
  P_MIEJSCOWOSC IN VARCHAR2,
  P_KOD_POCZTOWY IN VARCHAR2,
  P_KRAJ IN VARCHAR2,
  P_ID_HOTELU IN NUMBER,
  P_PENSJA IN NUMBER,
  P_STANOWISKO IN VARCHAR2
);

PROCEDURE ZMIEN_PENSJE(
  P_ID_PRACOWNIKA IN NUMBER
, NOWA_PENSJA IN NUMBER
);

PROCEDURE ZMIEN_STANOWISKO(
  P_ID_PRACOWNIKA IN NUMBER
, NOWE_STANOWISKO IN VARCHAR2
);

PROCEDURE ZWOLNIJ_PRACOWNIKA(
  P_ID_PRACOWNIKA IN NUMBER
);

PROCEDURE DODAJ_USLUGE
(
  P_ID_HOTELU IN NUMBER
, P_NAZWA IN VARCHAR2
, P_CENA IN NUMBER
);

PROCEDURE USLUGA_ZMIEN_CENE
(
  P_ID_USLUGI IN NUMBER
, NOWA_CENA IN NUMBER
);

PROCEDURE USLUGA_ZMIEN_NAZWE(
  P_ID_USLUGI IN NUMBER
, NOWA_NAZWA IN VARCHAR2
);

PROCEDURE DODAJ_ZNIZKE (
  P_PROCENT IN NUMBER
);

PROCEDURE EDYTUJ_ZNIZKE (
  P_ID_ZNIZKI IN NUMBER
, NOWY_PROCENT IN NUMBER
);

PROCEDURE OBNIZ_ZNIZKI;

END SZEF;
/
CREATE OR REPLACE PACKAGE BODY SZEF AS

  PROCEDURE DODAJ_HOTEL(
  NAZWA IN VARCHAR2
, ULICA IN VARCHAR2 
, NR_DOMU IN NUMBER 
, NR_MIESZKANIA IN NUMBER 
, MIEJSCOWOSC IN VARCHAR2 
, KOD_POCZTOWY IN VARCHAR2 
, KRAJ IN VARCHAR2 
) AS
  TEMP NUMBER;
  BEGIN
    DODAJ_ADRES(ULICA, NR_DOMU, NR_MIESZKANIA, MIEJSCOWOSC, KOD_POCZTOWY, KRAJ);
    
    SELECT ID_ADRESU INTO TEMP 
    FROM ADRESY 
    WHERE ULICA = DODAJ_HOTEL.ULICA 
      AND NR_DOMU = DODAJ_HOTEL.NR_DOMU 
      AND (NR_MIESZKANIA = DODAJ_HOTEL.NR_MIESZKANIA OR (NR_MIESZKANIA IS NULL AND DODAJ_HOTEL.NR_MIESZKANIA IS NULL))
      AND MIEJSCOWOSC = DODAJ_HOTEL.MIEJSCOWOSC 
      AND KOD_POCZTOWY = DODAJ_HOTEL.KOD_POCZTOWY 
      AND KRAJ = DODAJ_HOTEL.KRAJ;
    
    INSERT INTO HOTELE(ID_ADRESU, NAZWA)
    VALUES(TEMP, NAZWA);
  END DODAJ_HOTEL;

  PROCEDURE ZMIEN_NAZWE_HOTELU(
  ID_HOTELU IN NUMBER
, NOWA_NAZWA IN VARCHAR2
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM HOTELE WHERE ID_HOTELU = ZMIEN_NAZWE_HOTELU.ID_HOTELU;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
    END IF;

    UPDATE HOTELE SET NAZWA = NOWA_NAZWA WHERE ID_HOTELU = ZMIEN_NAZWE_HOTELU.ID_HOTELU;

  END ZMIEN_NAZWE_HOTELU;

PROCEDURE DODAJ_POKOJ(
  P_ID_HOTELU IN NUMBER,
  P_NR_POKOJU IN NUMBER,
  P_LICZBA_OSOB IN NUMBER,
  P_CENA IN NUMBER
) AS
  TEMP NUMBER;
BEGIN
  SELECT COUNT(*) INTO TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
  IF TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
  END IF;

  IF P_LICZBA_OSOB <> 2 AND P_LICZBA_OSOB <> 3 AND P_LICZBA_OSOB <> 4 THEN
    RAISE_APPLICATION_ERROR(-20016, 'LICZBA OSÓB W POKOJU MUSI BYÆ 2, 3 LUB 4');
  END IF;

  IF P_CENA <= 0 THEN
    RAISE_APPLICATION_ERROR(-20008, 'CENA JEST B£ÊDNA, POWINNA BYÆ WIÊKSZA OD ZERA');
  END IF;

  INSERT INTO POKOJE(ID_HOTELU, NR_POKOJU, LICZBA_OSOB, CENA)
  VALUES(P_ID_HOTELU, P_NR_POKOJU, P_LICZBA_OSOB, P_CENA); 
END DODAJ_POKOJ;

PROCEDURE DODAJ_WYPOSAZENIE(
  P_ID_POKOJU IN NUMBER,
  P_NAZWA_WYPOSAZENIA IN VARCHAR2,
  P_ILOSC IN NUMBER
) AS
  TEMP NUMBER;
BEGIN
  SELECT COUNT(*) INTO TEMP FROM POKOJE WHERE ID_POKOJU = P_ID_POKOJU;
  IF TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  IF P_ILOSC <= 0 THEN
    RAISE_APPLICATION_ERROR(-20017, 'ILOÆ WYPOSA¯ENIA W POKOJU MUSI BYÆ WIÊKSZA OD ZERA');
  END IF;

  INSERT INTO WYPOSAZENIE (ID_POKOJU, NAZWA, ILOSC) VALUES (P_ID_POKOJU, P_NAZWA_WYPOSAZENIA, P_ILOSC); 
END DODAJ_WYPOSAZENIE;

  PROCEDURE ZMIEN_CENE_POKOJU(
  P_ID_POKOJU IN NUMBER
, NOWA_CENA IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM POKOJE WHERE ID_POKOJU = P_ID_POKOJU;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
    END IF;

    IF NOWA_CENA <= 0 THEN
      RAISE_APPLICATION_ERROR(-20008, 'CENA JEST B£ÊDNA, POWINNA BYÆ WIÊKSZA OD ZERA');
    END IF;

    UPDATE POKOJE SET CENA=NOWA_CENA WHERE ID_POKOJU=P_ID_POKOJU;
  END ZMIEN_CENE_POKOJU;

  PROCEDURE ZMIEN_ILOSC_WYPOSAZENIA(
  P_ID_POKOJU IN NUMBER
, P_NAZWA IN VARCHAR2
, NOWA_ILOSC IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM POKOJE WHERE ID_POKOJU = P_ID_POKOJU;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
    END IF;

    IF NOWA_ILOSC <= 0 THEN
      RAISE_APPLICATION_ERROR(-20017, 'ILOÆ WYPOSA¯ENIA W POKOJU MUSI BYÆ WIÊKSZA OD ZERA');
    END IF;

    UPDATE WYPOSAZENIE SET ILOSC=NOWA_ILOSC WHERE ID_POKOJU=P_ID_POKOJU AND NAZWA=P_NAZWA; 
  END ZMIEN_ILOSC_WYPOSAZENIA;

PROCEDURE ZMIEN_LICZBE_OSOB_POKOJU(
  P_ID_POKOJU IN NUMBER,
  NOWA_LICZBA_OSOB IN NUMBER
) AS
  TEMP NUMBER;
BEGIN
  SELECT COUNT(*) INTO TEMP FROM POKOJE WHERE ID_POKOJU = P_ID_POKOJU;
  IF TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  IF NOWA_LICZBA_OSOB <> 2 AND NOWA_LICZBA_OSOB <> 3 AND NOWA_LICZBA_OSOB <> 4 THEN
    RAISE_APPLICATION_ERROR(-20016, 'LICZBA OSÓB W POKOJU MUSI BYÆ 2, 3 LUB 4');
  END IF;

  UPDATE POKOJE SET LICZBA_OSOB = NOWA_LICZBA_OSOB WHERE ID_POKOJU = P_ID_POKOJU;
END ZMIEN_LICZBE_OSOB_POKOJU;

PROCEDURE ZMIEN_NUMER_POKOJU(
  P_ID_POKOJU IN NUMBER
, NOWY_NR_POKOJU IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM POKOJE WHERE ID_POKOJU = P_ID_POKOJU;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
    END IF;

    UPDATE POKOJE SET NR_POKOJU=NOWY_NR_POKOJU WHERE ID_POKOJU=P_ID_POKOJU;
  END ZMIEN_NUMER_POKOJU;

  PROCEDURE ZMIEN_NAZWE_WYPOSAZENIA
(
  P_ID_POKOJU IN NUMBER
, P_NAZWA IN VARCHAR2
, NOWA_NAZWA IN VARCHAR2
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM POKOJE WHERE ID_POKOJU = P_ID_POKOJU;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
    END IF;

    UPDATE WYPOSAZENIE SET NAZWA=NOWA_NAZWA WHERE ID_POKOJU=P_ID_POKOJU AND NAZWA=P_NAZWA;
  END ZMIEN_NAZWE_WYPOSAZENIA;

PROCEDURE DODAJ_PRACOWNIKA( 
  P_IMIE IN VARCHAR2,
  P_NAZWISKO IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_NR_TELEFONU IN VARCHAR2,
  P_ULICA IN VARCHAR2,
  P_NR_DOMU IN NUMBER,
  P_NR_MIESZKANIA IN NUMBER,
  P_MIEJSCOWOSC IN VARCHAR2,
  P_KOD_POCZTOWY IN VARCHAR2,
  P_KRAJ IN VARCHAR2,
  P_ID_HOTELU IN NUMBER,
  P_PENSJA IN NUMBER,
  P_STANOWISKO IN VARCHAR2
) AS
BEGIN
  DODAJ_DANE_PERSONALNE(P_IMIE, P_NAZWISKO, P_EMAIL, P_NR_TELEFONU, P_ULICA, P_NR_DOMU, P_NR_MIESZKANIA, P_MIEJSCOWOSC, P_KOD_POCZTOWY, P_KRAJ);
  
  INSERT INTO PERSONEL (ID_OSOBY, ID_HOTELU, DATA_ZATRUDNIENIA, PENSJA, STANOWISKO)
  VALUES(
    (SELECT ID_OSOBY 
     FROM DANE_PERSONALNE 
     WHERE IMIE = P_IMIE 
       AND NAZWISKO = P_NAZWISKO 
       AND EMAIL = P_EMAIL 
       AND NR_TELEFONU = P_NR_TELEFONU), 
    P_ID_HOTELU, 
    SYSDATE, 
    P_PENSJA, 
    P_STANOWISKO
  );
END DODAJ_PRACOWNIKA;

  PROCEDURE ZMIEN_PENSJE(
  P_ID_PRACOWNIKA IN NUMBER
, NOWA_PENSJA IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM PERSONEL WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20012, 'PRACOWNIK NIE ISTNIEJE');
    END IF;

    IF NOWA_PENSJA <= 0 THEN
      RAISE_APPLICATION_ERROR(-20013, 'PENSJA MUSI BYC WIÊKSZA OD ZERA');
    END IF;

    UPDATE PERSONEL SET PENSJA = NOWA_PENSJA WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
  END ZMIEN_PENSJE;

  PROCEDURE ZMIEN_STANOWISKO(
  P_ID_PRACOWNIKA IN NUMBER
, NOWE_STANOWISKO IN VARCHAR2
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM PERSONEL WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20012, 'PRACOWNIK NIE ISTNIEJE');
    END IF;

    IF NOWE_STANOWISKO <> 'SZEF' AND NOWE_STANOWISKO <> 'POKOJOWKA' AND NOWE_STANOWISKO <> 'RECEPCJA' AND NOWE_STANOWISKO <> 'KONSERWATOR' THEN
      RAISE_APPLICATION_ERROR(-20014, 'B£EDNE STANOWISKO MUSI BYÆ SZEF, POKOJOWKA, KONSERWATOR LUB RECEPCJA');
    END IF;

    UPDATE PERSONEL SET STANOWISKO=NOWE_STANOWISKO WHERE ID_PRACOWNIKA=P_ID_PRACOWNIKA;
  END ZMIEN_STANOWISKO;

  PROCEDURE ZWOLNIJ_PRACOWNIKA(
  P_ID_PRACOWNIKA IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM PERSONEL WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20012, 'PRACOWNIK NIE ISTNIEJE');
    END IF;

    UPDATE PERSONEL SET DATA_ZWOLNIENIA=SYSDATE WHERE ID_PRACOWNIKA=P_ID_PRACOWNIKA;
  END ZWOLNIJ_PRACOWNIKA;

  PROCEDURE DODAJ_USLUGE
(
  P_ID_HOTELU IN NUMBER
, P_NAZWA IN VARCHAR2
, P_CENA IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
    END IF;

    IF P_CENA <= 0 THEN
      RAISE_APPLICATION_ERROR(-20008, 'CENA JEST B£ÊDNA, POWINNA BYÆ WIÊKSZA OD ZERA');
    END IF;

    INSERT INTO USLUGI(ID_HOTELU, NAZWA, CENA)
    VALUES(P_ID_HOTELU, P_NAZWA, P_CENA); 
  END DODAJ_USLUGE;

  PROCEDURE USLUGA_ZMIEN_CENE
(
  P_ID_USLUGI IN NUMBER
, NOWA_CENA IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM USLUGI WHERE ID_USLUGI = P_ID_USLUGI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20018, 'US£UGA NIE ISTNIEJE');
    END IF;

    IF NOWA_CENA <= 0 THEN
      RAISE_APPLICATION_ERROR(-20008, 'CENA JEST B£ÊDNA, POWINNA BYÆ WIÊKSZA OD ZERA');
    END IF;

    UPDATE USLUGI SET CENA=NOWA_CENA WHERE ID_USLUGI=P_ID_USLUGI;
  END USLUGA_ZMIEN_CENE;

  PROCEDURE USLUGA_ZMIEN_NAZWE(
  P_ID_USLUGI IN NUMBER
, NOWA_NAZWA IN VARCHAR2
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM USLUGI WHERE ID_USLUGI = P_ID_USLUGI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20018, 'US£UGA NIE ISTNIEJE');
    END IF;

    UPDATE USLUGI SET NAZWA=NOWA_NAZWA WHERE ID_USLUGI=P_ID_USLUGI;
  END USLUGA_ZMIEN_NAZWE;

  PROCEDURE DODAJ_ZNIZKE (
  P_PROCENT IN NUMBER
) AS
  BEGIN
    IF P_PROCENT < 0 AND P_PROCENT > 100 THEN
      RAISE_APPLICATION_ERROR(-20019, 'PROCENT PWOINIEN BYÆ W ZAKRESIE [0, 100]');
    END IF;

    INSERT INTO ZNIZKI(PROCENT) VALUES(P_PROCENT); 
  END DODAJ_ZNIZKE;

  PROCEDURE EDYTUJ_ZNIZKE (
  P_ID_ZNIZKI IN NUMBER
, NOWY_PROCENT IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM ZNIZKI WHERE ID_ZNIZKI = P_ID_ZNIZKI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20010, 'ZNI¯KA NIE ISTNIEJE');
    END IF;

    IF NOWY_PROCENT < 0 AND NOWY_PROCENT > 100 THEN
      RAISE_APPLICATION_ERROR(-20019, 'PROCENT PWOINIEN BYÆ W ZAKRESIE [0, 100]');
    END IF;

    UPDATE ZNIZKI SET PROCENT = NOWY_PROCENT WHERE ID_ZNIZKI = P_ID_ZNIZKI;
  END EDYTUJ_ZNIZKE;

  PROCEDURE OBNIZ_ZNIZKI AS
  BEGIN
    --IF TO_CHAR(SYSDATE, 'MMDD') = '0101' THEN
      UPDATE KLIENCI SET ID_ZNIZKI = 
          CASE 
              WHEN ID_ZNIZKI = 1 THEN 1
              ELSE ID_ZNIZKI - 1
          END;
    --END IF;  
  END OBNIZ_ZNIZKI;

END SZEF;
/
-------------- -------------- -------------- 
-------------- -- RECEPCJA -- -------------- 
-------------- -------------- -------------- 
create or replace PACKAGE RECEPCJA AS 

PROCEDURE DODAJ_REZERWACJA_USLUGA(
  P_ID_HOTELU IN NUMBER,
  P_ID_USLUGI IN NUMBER,
  P_ID_REZERWACJI IN NUMBER,
  P_LICZBA_OSOB IN NUMBER
);

PROCEDURE OPLATA_ZNISZCZENIE(
  P_ID_REZERWACJI IN NUMBER,
  P_OPLATA_ZNISZCZENIE IN NUMBER
);

PROCEDURE POTWIERDZ_REZERWACJE(
  P_ID_REZERWACJI IN NUMBER,
  P_ID_PRACOWNIKA IN NUMBER
);

PROCEDURE ZAKONCZ_REZERWACJE(
  P_ID_REZERWACJI IN NUMBER 
);

END RECEPCJA;
/
create or replace PACKAGE BODY RECEPCJA AS

PROCEDURE DODAJ_REZERWACJA_USLUGA(
  P_ID_HOTELU IN NUMBER,
  P_ID_USLUGI IN NUMBER,
  P_ID_REZERWACJI IN NUMBER,
  P_LICZBA_OSOB IN NUMBER
) AS
  V_TEMP NUMBER;
  V_ID_POKOJU NUMBER;
  V_LICZBA_OSOB_POKOJ NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM USLUGI WHERE ID_USLUGI = P_ID_USLUGI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20018, 'US£UGA NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  SELECT ID_POKOJU INTO V_ID_POKOJU FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

  SELECT COUNT(*) INTO V_TEMP FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  SELECT LICZBA_OSOB INTO V_LICZBA_OSOB_POKOJ FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU;
  IF V_LICZBA_OSOB_POKOJ <> 2 AND V_LICZBA_OSOB_POKOJ <> 3 AND V_LICZBA_OSOB_POKOJ <> 4 THEN
    RAISE_APPLICATION_ERROR(-20016, 'LICZBA OSÓB W POKOJU MUSI BYÆ 2, 3 LUB 4');
  END IF;

  IF P_LICZBA_OSOB < 0 OR P_LICZBA_OSOB > V_LICZBA_OSOB_POKOJ THEN
    RAISE_APPLICATION_ERROR(-20020, 'LICZBA OSÓB W US£UDZE NIE MO¯E BYÆ WIÊKSZA NI¯ LICZBA OSÓB W POKOJU I NIE MO¯E BYÆ MNIEJSZA OD ZERA');
  END IF;

  INSERT INTO REZERWACJE_USLUGI(ID_HOTELU, ID_USLUGI, ID_REZERWACJI, LICZBA_OSOB)
  VALUES(P_ID_HOTELU, P_ID_USLUGI, P_ID_REZERWACJI, P_LICZBA_OSOB); 
  
  AKTUALIZUJ_CENE_POBYTU(P_ID_REZERWACJI);
  
END DODAJ_REZERWACJA_USLUGA;

  PROCEDURE OPLATA_ZNISZCZENIE(
  P_ID_REZERWACJI IN NUMBER,
  P_OPLATA_ZNISZCZENIE IN NUMBER
) AS
  V_TEMP NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  IF P_OPLATA_ZNISZCZENIE < 0 THEN
    RAISE_APPLICATION_ERROR(-20006, 'B£ÊDNA WARTOÆ OP£ATA_ZNISZCZENIE');
  END IF;

  UPDATE REZERWACJE SET OPLATA_ZNISCZENIE = P_OPLATA_ZNISZCZENIE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  
  AKTUALIZUJ_CENE_POBYTU(P_ID_REZERWACJI);
  
END OPLATA_ZNISZCZENIE;

PROCEDURE POTWIERDZ_REZERWACJE(
  P_ID_REZERWACJI IN NUMBER,
  P_ID_PRACOWNIKA IN NUMBER
) AS
  V_TEMP NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM PERSONEL WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20012, 'PRACOWNIK NIE ISTNIEJE');
  END IF;

  UPDATE REZERWACJE SET ZAMELDOWANIE = SYSDATE, ID_PRACOWNIKA = P_ID_PRACOWNIKA WHERE ID_REZERWACJI = P_ID_REZERWACJI;
END POTWIERDZ_REZERWACJE;

PROCEDURE ZAKONCZ_REZERWACJE(
  P_ID_REZERWACJI IN NUMBER 
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
    END IF;

    UPDATE REZERWACJE SET ODMELDOWANIE = SYSDATE, OPLATA_CALOSC = 1 WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  END ZAKONCZ_REZERWACJE;

END RECEPCJA;
/
-------------- ------------ -------------- 
-------------- -- KLIENT -- -------------- 
-------------- ------------ --------------
create or replace PACKAGE KLIENT AS 

PROCEDURE DODAJ_KLIENTA( 
  P_IMIE IN VARCHAR2,
  P_NAZWISKO IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_NR_TELEFONU IN VARCHAR2,
  P_ULICA IN VARCHAR2,
  P_NR_DOMU IN NUMBER,
  P_NR_MIESZKANIA IN NUMBER,
  P_MIEJSCOWOSC IN VARCHAR2,
  P_KOD_POCZTOWY IN VARCHAR2,
  P_KRAJ IN VARCHAR2
);

PROCEDURE DODAJ_REZERWACJE(
  P_ID_HOTELU IN NUMBER,
  P_ID_KLIENTA IN NUMBER,
  P_LICZBA_OSOB IN NUMBER,
  P_PRZYJAZD IN DATE,
  P_ODJAZD IN DATE
);

PROCEDURE DODAJ_GOSCIA(
  P_ID_REZERWACJI IN NUMBER
, P_IMIE IN VARCHAR2
, P_NAZWISKO IN VARCHAR2
);

PROCEDURE OPLAC_ZALICZKE(
  P_ID_REZERWACJI IN NUMBER 
);

PROCEDURE USUN_GOSCIA(
  P_ID_REZERWACJI IN NUMBER
, P_IMIE IN VARCHAR2
, P_NAZWISKO IN VARCHAR2
);

PROCEDURE USUN_REZERWACJE(
  P_ID_REZERWACJI IN NUMBER
);

END KLIENT;
/
create or replace PACKAGE BODY KLIENT AS

  PROCEDURE DODAJ_KLIENTA( 
  P_IMIE IN VARCHAR2,
  P_NAZWISKO IN VARCHAR2,
  P_EMAIL IN VARCHAR2,
  P_NR_TELEFONU IN VARCHAR2,
  P_ULICA IN VARCHAR2,
  P_NR_DOMU IN NUMBER,
  P_NR_MIESZKANIA IN NUMBER,
  P_MIEJSCOWOSC IN VARCHAR2,
  P_KOD_POCZTOWY IN VARCHAR2,
  P_KRAJ IN VARCHAR2
) AS
BEGIN
  DODAJ_DANE_PERSONALNE(P_IMIE, P_NAZWISKO, P_EMAIL, P_NR_TELEFONU, P_ULICA, P_NR_DOMU, P_NR_MIESZKANIA, P_MIEJSCOWOSC, P_KOD_POCZTOWY, P_KRAJ);
  
  INSERT INTO KLIENCI (ID_OSOBY, ID_ZNIZKI)
  VALUES (
    (SELECT ID_OSOBY 
     FROM DANE_PERSONALNE 
     WHERE IMIE = P_IMIE 
       AND NAZWISKO = P_NAZWISKO 
       AND EMAIL = P_EMAIL 
       AND NR_TELEFONU = P_NR_TELEFONU ), 
    1
  );
END DODAJ_KLIENTA;

PROCEDURE DODAJ_REZERWACJE(
  P_ID_HOTELU IN NUMBER,
  P_ID_KLIENTA IN NUMBER,
  P_LICZBA_OSOB IN NUMBER,
  P_PRZYJAZD IN DATE,
  P_ODJAZD IN DATE
) AS
  V_COUNT NUMBER;
  V_CURSOR SYS_REFCURSOR;
  V_ID_POKOJU NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_COUNT FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
  IF V_COUNT = 0 THEN
    RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_COUNT FROM KLIENCI WHERE ID_KLIENTA = P_ID_KLIENTA;
  IF V_COUNT = 0 THEN
    RAISE_APPLICATION_ERROR(-20009, 'KLIENT NIE ISTNIEJE');
  END IF;

  IF P_LICZBA_OSOB <> 2 AND P_LICZBA_OSOB <> 3 AND P_LICZBA_OSOB <> 4 THEN
    RAISE_APPLICATION_ERROR(-20016, 'LICZBA OSÓB W POKOJU MUSI BYÆ 2, 3 LUB 4');
  END IF;

  V_CURSOR := SPRAWDZ_WOLNE_POKOJE(P_ID_HOTELU, P_LICZBA_OSOB, P_PRZYJAZD, P_ODJAZD);
  FETCH V_CURSOR INTO V_ID_POKOJU;
  IF V_CURSOR%NOTFOUND THEN
    CLOSE V_CURSOR;
    RAISE_APPLICATION_ERROR(-20017, 'BRAK WOLNYCH POKOI NA PODANY TERMIN');
  END IF;
  CLOSE V_CURSOR;

  INSERT INTO REZERWACJE (ID_HOTELU, ID_KLIENTA, ID_PRACOWNIKA, ID_POKOJU, PRZYJAZD, ODJAZD)
  VALUES (P_ID_HOTELU, P_ID_KLIENTA, 1, V_ID_POKOJU, P_PRZYJAZD, P_ODJAZD); --JEDEN DLA ID_PRACOWNIKA BO ZEBY SZEFA DODAWAC
  
  AKTUALIZUJ_ZNIZKE(P_ID_KLIENTA);
  
  SELECT ID_REZERWACJI INTO V_COUNT FROM REZERWACJE WHERE ID_KLIENTA = P_ID_KLIENTA AND 
  ID_POKOJU = V_ID_POKOJU AND PRZYJAZD = P_PRZYJAZD AND ODJAZD = P_ODJAZD;
  
  AKTUALIZUJ_CENE_POBYTU(V_COUNT);
  
END DODAJ_REZERWACJE;

  PROCEDURE DODAJ_GOSCIA(
  P_ID_REZERWACJI IN NUMBER
, P_IMIE IN VARCHAR2
, P_NAZWISKO IN VARCHAR2
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
    END IF;

    INSERT INTO GOSCIE VALUES(P_ID_REZERWACJI, P_IMIE, P_NAZWISKO); 
  END DODAJ_GOSCIA;

  PROCEDURE OPLAC_ZALICZKE(
  P_ID_REZERWACJI IN NUMBER 
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
    END IF;

    UPDATE REZERWACJE SET OPLATA_ZALICZKA = 1 WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  END OPLAC_ZALICZKE;

  PROCEDURE USUN_GOSCIA(
  P_ID_REZERWACJI IN NUMBER
, P_IMIE IN VARCHAR2
, P_NAZWISKO IN VARCHAR2
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
    END IF;

    DELETE GOSCIE
    WHERE ID_REZERWACJI=P_ID_REZERWACJI AND IMIE=P_IMIE AND NAZWISKO=P_NAZWISKO; 
  END USUN_GOSCIA;

  PROCEDURE USUN_REZERWACJE(
  P_ID_REZERWACJI IN NUMBER
) AS
  TEMP NUMBER;
  BEGIN
    SELECT COUNT(*) INTO TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    IF TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
    END IF;

    DELETE FROM NAPRAWY WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    DELETE FROM SPRZATANIE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    DELETE FROM REZERWACJE_USLUGI WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    DELETE FROM GOSCIE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

    DELETE FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  END USUN_REZERWACJE;

END KLIENT;
/
-------------- --------------- -------------- 
-------------- -- POKOJÓWKA -- -------------- 
-------------- --------------- --------------
CREATE OR REPLACE 
PACKAGE POKOJOWKA AS 

PROCEDURE POKOJ_POSPRZATANY(
  P_ID_HOTELU IN NUMBER,
    P_ID_REZERWACJI IN NUMBER,
    P_NR_POKOJU IN NUMBER,
    P_ID_PRACOWNIKA IN NUMBER,
    P_GODZINA IN TIMESTAMP
);

END POKOJOWKA;
/
CREATE OR REPLACE PACKAGE BODY POKOJOWKA AS

  PROCEDURE POKOJ_POSPRZATANY(
    P_ID_HOTELU IN NUMBER,
    P_ID_REZERWACJI IN NUMBER,
    P_NR_POKOJU IN NUMBER,
    P_ID_PRACOWNIKA IN NUMBER,
    P_GODZINA IN TIMESTAMP
  ) AS
    V_TEMP NUMBER;
    V_ID_POKOJU NUMBER;
  BEGIN
    SELECT COUNT(*) INTO V_TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
    IF V_TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
    END IF;

    SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
    IF V_TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
    END IF;

    SELECT ID_POKOJU INTO V_ID_POKOJU FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

    SELECT COUNT(*) INTO V_TEMP FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU AND NR_POKOJU = P_NR_POKOJU;
    IF V_TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
    END IF;

    SELECT COUNT(*) INTO V_TEMP FROM PERSONEL WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
    IF V_TEMP = 0 THEN
      RAISE_APPLICATION_ERROR(-20012, 'PRACOWNIK NIE ISTNIEJE');
    END IF;

    UPDATE SPRZATANIE 
    SET ID_PRACOWNIKA = P_ID_PRACOWNIKA, GODZINA_SPRZATANIA = P_GODZINA 
    WHERE ID_HOTELU = P_ID_HOTELU AND ID_REZERWACJI = P_ID_REZERWACJI AND NR_POKOJU = P_NR_POKOJU;
  END POKOJ_POSPRZATANY;

END POKOJOWKA;
/
-------------- ----------------- -------------- 
-------------- -- KONSERWATOR -- -------------- 
-------------- ----------------- --------------
CREATE OR REPLACE 
PACKAGE KONSERWATOR AS 

PROCEDURE POKOJ_NAPRAWIONY(
  P_ID_HOTELU IN NUMBER,
  P_ID_REZERWACJI IN NUMBER,
  P_NR_POKOJU IN NUMBER,
  P_ID_PRACOWNIKA IN NUMBER,
  P_GODZINA IN TIMESTAMP
);

END KONSERWATOR;
/
CREATE OR REPLACE
PACKAGE BODY KONSERWATOR AS

  PROCEDURE POKOJ_NAPRAWIONY(
  P_ID_HOTELU IN NUMBER,
  P_ID_REZERWACJI IN NUMBER,
  P_NR_POKOJU IN NUMBER,
  P_ID_PRACOWNIKA IN NUMBER,
  P_GODZINA IN TIMESTAMP
) AS
  V_TEMP NUMBER;
  V_ID_POKOJU NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_TEMP FROM HOTELE WHERE ID_HOTELU = P_ID_HOTELU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20015, 'HOTEL NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20004, 'REZERWACJA NIE ISTNIEJE');
  END IF;

  SELECT ID_POKOJU INTO V_ID_POKOJU FROM REZERWACJE WHERE ID_REZERWACJI = P_ID_REZERWACJI;

  SELECT COUNT(*) INTO V_TEMP FROM POKOJE WHERE ID_POKOJU = V_ID_POKOJU AND NR_POKOJU = P_NR_POKOJU;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20007, 'POKÓJ NIE ISTNIEJE');
  END IF;

  SELECT COUNT(*) INTO V_TEMP FROM PERSONEL WHERE ID_PRACOWNIKA = P_ID_PRACOWNIKA;
  IF V_TEMP = 0 THEN
    RAISE_APPLICATION_ERROR(-20012, 'PRACOWNIK NIE ISTNIEJE');
  END IF;

  UPDATE NAPRAWY 
  SET ID_PRACOWNIKA = P_ID_PRACOWNIKA, GODZINA_NAPRAWY = P_GODZINA 
  WHERE ID_HOTELU = P_ID_HOTELU AND ID_REZERWACJI = P_ID_REZERWACJI AND NR_POKOJU = P_NR_POKOJU;
END POKOJ_NAPRAWIONY;

END KONSERWATOR;
/